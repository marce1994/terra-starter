{"version":3,"sources":["components/Menu.js","components/WalletAddress.js","App.js","contract/address.js","contract/execute.js","components/LoadingIndicator/index.js","pages/play.js","pages/guide.js","contract/query.js","pages/leaderboard.js","index.js"],"names":["menu_options","name","link","Menu","className","map","mb","index","to","WalletAddress","connectedWallet","useConnectedWallet","terraAddress","slice","App","useWallet","status","connect","disconnect","availableConnectTypes","console","log","WalletStatus","WALLET_NOT_CONNECTED","src","alt","WALLET_CONNECTED","type","onClick","contractAddress","wallet","config","network","clicker","contractAddresses","default","sleep","ms","Promise","resolve","setTimeout","until","Date","now","untilInterval","_exec","msg","fee","Fee","uluna","a","lcd","LCDClient","URL","chainID","post","msgs","MsgExecuteContract","walletAddress","result","tx","txInfo","txhash","Error","setScore","score","upsert_score","LoadingIndicator","Play","useState","time","setTime","top","left","targetPosition","setTargetPosition","loading","setLoading","useEffect","unsubscribe","setInterval","display","alert","submitScore","execute","window","location","href","id","style","audio","Audio","volume","play","Math","floor","random","Guide","getScores","wasm","contractQuery","get_scores","Leaderboard","scores","setScores","fetchScores","query","then","length","toString","padStart","renderScores","TWITTER_HANDLE","TWITTER_LINK","getChainOptions","chainOptions","ReactDOM","render","StrictMode","path","element","target","rel","document","getElementById"],"mappings":"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","file":"static/js/main.da8cf7d7.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\n\r\nconst menu_options = [\r\n  { name: 'Play', link: '/play' },\r\n  { name: 'Leaderboard', link: '/leaderboard' },\r\n  { name: 'How to play', link: '/guide' },\r\n];\r\n\r\nconst Menu = () => {\r\n\r\n  const renderMenu = () => {\r\n    return menu_options.map((mb, index) => {\r\n\r\n      const { name, link } = mb;\r\n      \r\n      return (\r\n        <Link to={link} key={index} className=\"menu-item\">\r\n          <span className=\"item-text\">{name}</span>\r\n        </Link>\r\n      );\r\n    });\r\n  };\r\n\r\n  return <div className=\"game-menu\">{renderMenu()}</div>;\r\n};\r\n\r\nexport default Menu","import { useConnectedWallet } from '@terra-money/wallet-provider';\r\n\r\nconst WalletAddress = () => {\r\n  const connectedWallet = useConnectedWallet();\r\n  const { terraAddress } = { ...connectedWallet };\r\n  \r\n  return (\r\n    <div>\r\n      {terraAddress && (\r\n        <button className=\"wallet-address\">\r\n          {terraAddress.slice(0, 5) + '...' + terraAddress.slice(-4)}\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WalletAddress;","import './App.css';\r\nimport { useWallet, WalletStatus } from \"@terra-money/wallet-provider\";\r\n\r\nimport Menu from './components/Menu';\r\nimport WalletAddress from './components/WalletAddress';\r\n\r\nfunction App() {\r\n  const { status, connect, disconnect, availableConnectTypes } = useWallet();\r\n\r\n  console.log(\"Wallet status is \", status);\r\n  console.log(\"Available connection types:\", availableConnectTypes);\r\n\r\n  const renderConnectButton = () => {\r\n    if (status === WalletStatus.WALLET_NOT_CONNECTED) {\r\n      return (\r\n        <div className=\"connect-wallet-div\">\r\n          <button\r\n            type=\"button\"\r\n            key={`connect-EXTENSION`}\r\n            onClick={() => connect(\"EXTENSION\")}\r\n            className=\"cta-button connect-wallet-button\"\r\n          >\r\n            Connect wallet\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n    // Check if wallet is connect\r\n    else if (status === WalletStatus.WALLET_CONNECTED) {\r\n      return (\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => disconnect()}\r\n          className=\"cta-button connect-wallet-button\"\r\n        >\r\n          Disconnect\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <header>\r\n        <div className=\"header-titles\">\r\n          <h1>⚔ Love is war ⚔</h1>\r\n          <p>Only you can conquer Shinomiya before she conquers you</p>\r\n          <WalletAddress />\r\n        </div>\r\n\r\n      </header>\r\n      {/* If not connected, show the goblin GIF! */}\r\n      {status === WalletStatus.WALLET_NOT_CONNECTED && (\r\n        <div>\r\n          <img\r\n            src=\"o-kawaii-koto-thinking.gif\"\r\n            alt=\"Shinomiya O kawaii koto gif\"\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Show the menu after connection */}\r\n      {status === WalletStatus.WALLET_CONNECTED && (\r\n          <div className=\"game-menu-container\">\r\n            <Menu />\r\n          </div>\r\n        )}\r\n        \r\n\r\n      {renderConnectButton()}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;","import config from \"../refs.terrain.json\"\r\n\r\nexport const contractAddress = (wallet) => config[wallet.network.name].clicker.contractAddresses.default","import { LCDClient, MsgExecuteContract, Fee } from '@terra-money/terra.js';\r\nimport { contractAddress } from './address';\r\n\r\n// ==== utils ====\r\n\r\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\nconst until = Date.now() + 1000 * 60 * 60;\r\nconst untilInterval = Date.now() + 1000 * 60;\r\n\r\nconst _exec =\r\n  (msg, fee = new Fee(200000, { uluna: 10000 })) =>\r\n  async (wallet) => {\r\n    const lcd = new LCDClient({\r\n      URL: wallet.network.lcd,\r\n      chainID: wallet.network.chainID,\r\n    });\r\n\r\n    const { result } = await wallet.post({\r\n      fee,\r\n      msgs: [\r\n        new MsgExecuteContract(\r\n          wallet.walletAddress,\r\n          contractAddress(wallet),\r\n          msg\r\n        ),\r\n      ],\r\n    });\r\n\r\n    while (true) {\r\n      try {\r\n        return await lcd.tx.txInfo(result.txhash);\r\n      } catch (e) {\r\n        if (Date.now() < untilInterval) {\r\n          await sleep(500);\r\n        } else if (Date.now() < until) {\r\n          await sleep(1000 * 10);\r\n        } else {\r\n          throw new Error(\r\n            `Transaction queued. To verify the status, please check the transaction hash: ${result.txhash}`\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n// ==== execute contract ====\r\n// THIS IS ALL I ADDED!!!\r\nexport const setScore = async (wallet, score) =>\r\n  _exec({ upsert_score: { score } })(wallet);","import React from 'react';\r\nimport './LoadingIndicator.css';\r\n\r\nconst LoadingIndicator = () => {\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingIndicator;","import React, { useState, useEffect } from \"react\";\r\nimport * as execute from '../contract/execute';\r\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\r\nimport LoadingIndicator from '../components/LoadingIndicator';\r\n\r\nconst Play = () => {\r\n  const connectedWallet = useConnectedWallet();\r\n  // Configure this as you want, I like shorter games\r\n  const playTime = 15;\r\n\r\n  const [time, setTime] = useState(playTime);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  // We use this to track where the target is on the screen\r\n  const [targetPosition, setTargetPosition] = useState({ top: \"15%\", left: \"50%\" });\r\n  const [loading, setLoading] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  \r\n  // Every second we're going to lower the value of time.\r\n  useEffect(() => {\r\n    const unsubscribe = setInterval(() => {\r\n      setTime(time => time > 0 ? time - 1 : 0);\r\n    }, 1000);\r\n    return unsubscribe;\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (time === 0) {\r\n      setTargetPosition({ display: 'none' });\r\n      // Show alert to let user know it's game over\r\n      alert(`Game Over! Your score is ${score}. Please confirm transaction to submit score.`);\r\n      submitScore();\r\n    }\r\n  }, [time]);\r\n\r\n  const submitScore = async () => {\r\n    if (connectedWallet && connectedWallet.network.name === 'testnet') {\r\n      setLoading(true);\r\n      const tx = await execute.setScore(connectedWallet, score);\r\n      console.log(tx);\r\n      // Once the transaction is confirmed, we let the user know and navigate to the leaderboard\r\n      alert('Score submitted!');\r\n      setLoading(false);\r\n      window.location.href = '/leaderboard';\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    // OGs will know this :)\r\n    let audio = new Audio(\"/Zergling_explodes.mp3\");\r\n    \r\n    // Don't let it get too loud!\r\n    audio.volume = 0.2;\r\n    audio.play();\r\n\r\n    setScore(score => score + 1);\r\n    \r\n    // Play around with this to control bounds!\r\n    setTargetPosition({\r\n      top: `${Math.floor(Math.random() * 80)}%`,\r\n      left: `${Math.floor(Math.random() * 80)}%`\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"score-board-container\">\r\n      <div className=\"play-container\">\r\n        <span>Score: {score}</span>\r\n        <span>Fight!</span>\r\n        <span>Time left: {time} s</span>\r\n      </div>\r\n\r\n      {/* Render loading or game container */}\r\n      {loading ? (\r\n        <LoadingIndicator />\r\n      ) : (\r\n        <div className=\"game-container\">\r\n          {/* CHANGE THIS IMAGE! It's loaded from the public folder. */}\r\n          <img src={\"kaguya-o-kawaii-koto.gif\"} id=\"target\" alt=\"Target\" style={{ ...targetPosition }} onClick={handleClick} />\r\n          <img src=\"EWiBZehWAAEaymY.jpg\" id=\"marine-img\" alt=\"Shirogane\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Play;","import { Link } from \"react-router-dom\";\r\n\r\nconst Guide = () => {\r\n  return (\r\n    <main className=\"App\">\r\n      <header>\r\n        <Link to=\"/\" className=\"home-link\">\r\n          <div className=\"header-titles\">\r\n            <h1>⚔ Love is war ⚔</h1>\r\n            <p>Only you can conquer Shinomiya before she conquers you</p>\r\n          </div>\r\n        </Link>\r\n      </header>\r\n\r\n      <div className=\"score-board-container\">\r\n        <h3>How to play</h3>\r\n\r\n        <div>\r\n          <span className=\"help\">\r\n            Click as many Shinomiyas as you can within 15 seconds!\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\nexport default Guide;\r\n","import { LCDClient } from \"@terra-money/terra.js\";\r\nimport { contractAddress } from \"./address\";\r\n\r\nexport const getScores = async (wallet) => {\r\n    console.log(\"Contract address is \", contractAddress(wallet));\r\n    const lcd = new LCDClient({\r\n        URL: wallet.network.lcd,\r\n        chainID: wallet.network.chainID,\r\n    });\r\n    return lcd.wasm.contractQuery(contractAddress(wallet), { get_scores: {} });\r\n};","import { Link } from \"react-router-dom\";\r\nimport * as query from \"../contract/query\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\r\n\r\nconst Leaderboard = () => {\r\n  const [scores, setScores] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const connectedWallet = useConnectedWallet();\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const fetchScores = async () => {\r\n      if (connectedWallet && connectedWallet.network.name === \"testnet\") {\r\n        return (await query.getScores(connectedWallet)).scores;\r\n      }\r\n    };\r\n\r\n    fetchScores().then((scores) => {\r\n      setScores(scores);\r\n      setLoading(false);\r\n    });\r\n  }, [connectedWallet]);\r\n\r\n  const renderScores = (scores) => {\r\n    if (!scores || scores.length < 1) {\r\n      return <div> No scores available :( </div>;\r\n    }\r\n\r\n    return scores.map((score, index) => {\r\n      return (\r\n        <div key={index} className=\"score\">\r\n          {/* Format is address: score */}\r\n          {/* Slice address to first 5 and last 4 digits so it looks like terra...a1b2*/}\r\n          <span>\r\n            {score[0].slice(0, 5) + \"...\" + score[0].slice(-4)}:{\" \"}\r\n            {score[1].toString().padStart(2, \"0\")}\r\n          </span>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <header>\r\n        <Link to=\"/\" className=\"home-link\">\r\n          <div className=\"header-titles\">\r\n          <h1>⚔ Love is war ⚔</h1>\r\n          <p>Only you can conquer Shinomiya before she conquers you</p>\r\n          </div>\r\n        </Link>\r\n      </header>\r\n\r\n      <div className=\"score-board-container\">\r\n        <h3>Scoreboard</h3>\r\n        {/* If loading, show loading, else render */}\r\n        {loading ? <div>Loading...</div> : renderScores(scores)}\r\n\r\n        <div></div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n","import App from './App';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Route, Routes, BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nimport Play from './pages/play';\r\nimport Guide from './pages/guide';\r\nimport Leaderboard from './pages/leaderboard';\r\n\r\nimport { getChainOptions, WalletProvider } from '@terra-money/wallet-provider';\r\n\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\ngetChainOptions().then((chainOptions) => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      {/* Wrap the app in a context provider for the wallet */}\r\n      <WalletProvider {...chainOptions}>\r\n        <div className=\"App-header\">\r\n          <BrowserRouter>\r\n            <Routes>\r\n              <Route path=\"/\" element={<App />} />\r\n              <Route path=\"/play\" element={<Play />} />\r\n              <Route path=\"/leaderboard\" element={<Leaderboard />} />\r\n              <Route path=\"/guide\" element={<Guide />} />\r\n            </Routes>\r\n          </BrowserRouter>\r\n\r\n          <div className=\"footer-container\">\r\n            <img\r\n              alt=\"Twitter Logo\"\r\n              className=\"twitter-logo\"\r\n              src=\"/twitter-logo.svg\"\r\n            />\r\n            <a\r\n              className=\"footer-text\"\r\n              href={TWITTER_LINK}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >{`Made with @${TWITTER_HANDLE}`}</a>\r\n          </div>\r\n        </div>\r\n      </WalletProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n});\r\n"],"sourceRoot":""}